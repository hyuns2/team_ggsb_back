input {
	http_poller {
		urls => {
			dummy => {
				url => "http://localhost"
			}
		}
		socket_timeout =>6000
		request_timeout => 6000
		schedule => {  cron => "0 0 0 * * *" }
		codec => "json"
	}
}

filter {
	ruby {
		code =>  "
			event.set('today', (Time.now + 32400).strftime('%Y-%m-%d'))
		"
	}
	http {
		url => "http://opendata.kwater.or.kr/openapi-data/service/pubd/waterinfos/waterquality/daywater/list"
		query => {
			"serviceKey" => "GrFy4vfRaRPLHdHSX1S1wpuOtZSyPcT09xfdS5nrfPqyNcdYxZnG%2F4K2eEMhIhSzZ0tvIusF24meUKW3uF9FEw%3D%3D"
			"stdt" => "%{today}"
			"eddt" => "%{today}"
			"numOfRows" => "100"
			"pageNo" => "1"
		}
		headers => {
        		"Accept" => "application/json"
      		}
		target_body => api_response
	}

	split {
		field => "[api_response][response][body][items][item]"
	}
	mutate {
		rename => { "[api_response][response][body][items][item][data4]" => "phVal" }
		rename => { "[api_response][response][body][items][item][data5]" => "tbVal" }
		rename => { "[api_response][response][body][items][item][data6]" => "clVal" }
		rename => { "[api_response][response][body][items][item][sitenm]" => "fcltyMngNm" }
		rename => { "[api_response][response][body][items][item][cltdt]" => "occrrncDt" }


		convert => { 
			"occrrncDt" => "string"
			"phVal" => "string"
			"tbVal" => "string"
			"clVal" => "string"
		}
		remove_field => ["@version" , "agent", "ecs", "architecture", "message", "[api_response][response][header]", "[api_response]", "tags", "[api_response][response][body][items][item][data3]", "[error][message]", "[event][duration]", "[api_response][response][body][items][item][sgcnm]", "[host]", "[http]", "[api_response][response][body][numOfRows]", "[api_response][response][body][pageNo]", "[api_response][response][body][items][item][data1]", "[api_response][response][body][items][item][data2]", "today", "[api_response][response][body][totalCount]", "[url]", "[event]", "[error]"]
	}
	ruby {
		code => "
			event.set('dt', event.get('occrrncDt')[0..11])
			event.set('name', event.get('fcltyMngNm')[0..4])
			"
	}
	mutate {
		merge => { "dt" => "name"}
		add_field => {
			"datetime" => "%{@timestamp}"
		}
		remove_field => ["@timestamp"]
	}
	ruby {
		code => "
			event.set('year', event.get('occrrncDt')[0..3])
			event.set('month', event.get('occrrncDt')[4..5])
			event.set('day', event.get('occrrncDt')[6..7])
			event.set('temp', event.get('year') + '-' + event.get('month') + '-' + event.get('day') + 'T' + '00:00:00' )
			"
	}
	date {
		match => ["temp",  "yyyy-MM-dd'T'HH:mm:ss"]
		target => "datetime"
		timezone => "UTC"
	}
	mutate {
		join => { "dt" => ""}
		remove_field => ["current", "year", "month", "day", "clock", "temp", "name"]
	}
}

output {
	elasticsearch {
		hosts => ["http://elasticsearch:9200"]
		index => "water-type1"
		document_id => "%{[dt]}"
	}
	stdout {}
}