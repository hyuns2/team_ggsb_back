input {
	http_poller {
		urls => {
			dummy => {
				url => "http://localhost"
			}
		}
		keepalive => false
		request_timeout => 3600
		socket_timeout => 3600
		schedule => {  cron => "0 0 * * * *" }
		codec => "json"
	}
}

filter {
	ruby {
		code =>  "
			event.set('today', (Time.now+32400).strftime('%Y-%m-%d'))
			event.set('hour', (Time.now+32400).strftime('%H'))
			event.set('plztoday', (Time.now).strftime('%Y-%m-%d'))
		"
	}
	mutate {
		add_field => {
			"jabalsigan1" => "00"
		}
	}
	ruby {
		
		code => "
			event.set('jabalsigan2' , event.get('jabalsigan1')[0..1])
			"
	}
	if [hour] == [jabalsigan2] {
		http {
			url => "http://apis.data.go.kr/B500001/rwis/waterQuality/list?serviceKey=GrFy4vfRaRPLHdHSX1S1wpuOtZSyPcT09xfdS5nrfPqyNcdYxZnG%2F4K2eEMhIhSzZ0tvIusF24meUKW3uF9FEw%3D%3D&liIndDiv=1&numOfRows=100&pageNo=1&stDt=%{plztoday}&edDt=%{plztoday}&stTm=24&edTm=24"
			headers => {
        			"Accept" => "application/json"
      			}
			keepalive => false
			request_timeout => 3600
			socket_timeout => 3600
			target_body => api_response
		}
	}
	else {
		http {
			url => "http://apis.data.go.kr/B500001/rwis/waterQuality/list?serviceKey=GrFy4vfRaRPLHdHSX1S1wpuOtZSyPcT09xfdS5nrfPqyNcdYxZnG%2F4K2eEMhIhSzZ0tvIusF24meUKW3uF9FEw%3D%3D&liIndDiv=1&numOfRows=100&pageNo=1&stDt=%{today}&edDt=%{today}&stTm=%{hour}&edTm=%{hour}"
			headers => {
        			"Accept" => "application/json"
      			}
			keepalive => false
			request_timeout => 3600
			socket_timeout => 3600
			target_body => api_response
		}
	}
	split {
		field => "[api_response][response][body][items][item]"
	}

	mutate {
		rename => { "[api_response][response][body][items][item][fcltyMngNm]" => "fcltyMngNm" }
		rename => { "[api_response][response][body][items][item][phVal]" => "phVal" }
		rename => { "[api_response][response][body][items][item][tbVal]" => "tbVal" }
		rename => { "[api_response][response][body][items][item][clVal]" => "clVal" }
		rename => { "[api_response][response][body][items][item][occrrncDt]" => "occrrncDt" }		

		convert => { 
			"occrrncDt" => "string"
			"fcltyMngNm" => "string"
			"phVal" => "string"
			"tbVal" => "string"
			"clVal" => "string"
		}		

		remove_field => ["@version","plztoday", 'jabalsigan1', 'jabalsigan2',  "agent", "ecs", "architecture", "message", "[api_response][response][header]", "tags", "[api_response]", "[api_response][response][body][items][item][fcltyAddr]", "[api_response][response][body][items][item][fcltyMngNo]", "[api_response][response][body][items][item][liIndDivName]", "[api_response][response][body][items][item][no]", "[api_response][response][body][items][item][phUnit]", "[api_response][response][body][items][item][tbUnit]", "[api_response][response][body][items][item][clUnit]", "[api_response][response][body][numOfRows]", "[api_response][response][body][pageNo]", "[api_response][response][body][totalCount]", "[error][message]", "[url][full]", "[error]","[http]", "[url]",  "[event]",  "today", "host", "hour", "[http][request][method]" ]
	}
	ruby {
		code => "
			event.set('dt', event.get('occrrncDt')[0..11])
			event.set('name', event.get('fcltyMngNm')[0..4])
			"		
	}
	mutate {
		merge => { "dt" => "name"}
		remove_field => ["@timestamp"]
	}

	ruby {
		code => "
			event.set('year', event.get('occrrncDt')[0..3])
			event.set('month', event.get('occrrncDt')[4..5])
			event.set('day', event.get('occrrncDt')[6..7])
			event.set('clock', event.get('occrrncDt')[8..9])
			event.set('date', event.get('year') + '-' + event.get('month') + '-' + event.get('day'))
		"
	}

	mutate {
    		convert => {      
      			"clock" => "integer"      
    		}
		add_field => {
			"jebal1" => "%{date} %{clock}:00:00"
		}
	}

	if [clock] == 24 {
		ruby {
      			code => "
				temp_hour = event.get('[clock]') - 24;
        				formatted_hour = '%02d' % [temp_hour];
        				event.set('clock_new', formatted_hour);
			"
    		}
		mutate {
      			add_field => {
        				"jebal2" => "%{date} %{clock_new}:00:00"
			}
		}
		date {
      			match => ["jebal2", "yyyy-MM-dd HH:mm:ss"]
      			timezone => "UTC"
      			target => "datetime"
    		}
		ruby {
      			code => 'event.set("datetime", LogStash::Timestamp.new(Time.at(event.get("datetime").to_f+86400)))'
  		}
	}
	else {
		date {
      			match => ["jebal1", "yyyy-MM-dd HH:mm:ss"]
      			timezone => "UTC"
      			target => "datetime"
    		}
	}

	mutate {		
		join => { "dt" => ""}
		remove_field => ["current", "year", "month", "day", "clock", "clock_new", "date", "name", "temp_hour", "formatted_hour", "jebal1", "jebal2", "temp", "tags", "headers", "http_request_failure"]
	}
}
output {
	elasticsearch {
		hosts => ["http://elasticsearch:9200"]
		index => "water-type0"
		document_id => "%{[dt]}"
	}
	stdout {}
}